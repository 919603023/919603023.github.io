"use strict";(self.webpackChunkblog_vuepress=self.webpackChunkblog_vuepress||[]).push([[4404],{629:(t,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-4690f959",path:"/other/linux/_blog/Systemctl%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/Systemctl%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8.html",title:"Systemctl简单应用",lang:"zh-CN",frontmatter:{title:"Systemctl简单应用"},excerpt:"",headers:[{level:2,title:"systemctl",slug:"systemctl",children:[{level:3,title:"一、 [Unit]",slug:"一、-unit",children:[]},{level:3,title:"二、[Service]",slug:"二、-service",children:[]},{level:3,title:"三、[Install]",slug:"三、-install",children:[]},{level:3,title:"四、启动、停止、开机自启动",slug:"四、启动、停止、开机自启动",children:[]}]}],filePathRelative:"other/linux/_blog/Systemctl简单应用/Systemctl简单应用.md",git:{updatedTime:1629192039e3,contributors:[]}}},1731:(t,e,a)=>{a.r(e),a.d(e,{default:()=>d});const s=(0,a(6252).uE)('<h2 id="systemctl" tabindex="-1"><a class="header-anchor" href="#systemctl" aria-hidden="true">#</a> systemctl</h2><blockquote><p>  systemctl是linux中的服务管理,是一个systemd的工具，主要负责控制systemd系统和服务管理器<br> 在ubuntu 、centos等一系列发行版中可用。可以方便的管理需要启动的服务等。可以实现开机自启动、出错重启和定时重启等等功能。</p></blockquote><p><em>简单的演示</em></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[Unit]\nDescription= a sample thing\n\n[Service]\ntype=simple\nRestart=on-failure\nExecStart=/home/ubuntu/mimc-fast-aarch64\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="一、-unit" tabindex="-1"><a class="header-anchor" href="#一、-unit" aria-hidden="true">#</a> 一、 <strong>[Unit]</strong></h3><blockquote><p>定义启动的顺序以及依赖的关系</p></blockquote><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>Description</td><td>主要是填写一些信息，用于当前服务的简单描述</td></tr><tr><td>Documentation</td><td>可以用来指定文档的位置，用于当前服务文档查询</td></tr><tr><td>After</td><td>可以指定在哪些服务之后进行启动</td></tr><tr><td>Before</td><td>可以指定在哪些服务之前进行启动</td></tr><tr><td>Wants</td><td>可以指定服务依赖于哪些服务(这种依赖是&quot;弱依赖&quot;，即使所依赖的服务的启动情况不影响当前的服务是否启动)</td></tr><tr><td>Requires</td><td>可以指定服务依赖于哪些服务(这种依赖是&quot;强依赖&quot;，一旦所依赖的服务异常，当前的服务也随之停止)</td></tr></tbody></table><h3 id="二、-service" tabindex="-1"><a class="header-anchor" href="#二、-service" aria-hidden="true">#</a> 二、<strong>[Service]</strong></h3><blockquote><p>定义启动、关闭和重启服务等操作时的方式</p></blockquote><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>EnvironmentFile</td><td>用来指定当前服务启动的环境变量 以路径的形式在文件中用<em>key=value</em> 的形式写入 读取时可以使用$key来读取</td></tr><tr><td>ExecStart</td><td>指定服务启动时执行的命令</td></tr><tr><td>ExecStop</td><td>指定服务停止时执行的命令</td></tr><tr><td>ExecReload</td><td>指定服务重启时执行的命令</td></tr><tr><td>ExecStartPre</td><td>指定服务启动之前执行的命令</td></tr><tr><td>ExecStartPost</td><td>指定服务启动之后执行的命令</td></tr><tr><td>ExecStopPost</td><td>指定服务停止之后执行的命令</td></tr><tr><td>RestartSec</td><td>指定服务在重启前等待的时间(单位为 &quot;秒&quot;)</td></tr><tr><td>Type</td><td>指定启动类型:见下方<a href="#type">Type</a></td></tr><tr><td>Restart</td><td>指定重启时的类型:见下方<a href="#restart">Restart</a></td></tr><tr><td>KillMode</td><td>指定停止的方式:见下方<a href="#killmode">KillMode</a></td></tr><tr><td>特殊前缀</td><td></td></tr></tbody></table><blockquote><ol><li>  @ :之后的参数依次作为&quot;argv[0]  argv[1]   argv[2]  …&quot;传给需要执行的进程</li><li>  - :进程运行错误也不会当作执行失败，但是会在日志中报错</li><li>  + :进程以超级管理员权限运行</li></ol></blockquote><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> <strong>[Type]</strong></h4><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>simple</td><td>指定ExecStart字段的进程为主进程</td></tr><tr><td>forking</td><td>指定以fork() 子进程执行ExecStart字段的进程</td></tr><tr><td>oneshot</td><td>执行一次</td></tr><tr><td>notify</td><td>启动后发送会发送通知信号通知systemd</td></tr><tr><td>idle</td><td>等其他任务结束后才运行</td></tr></tbody></table><h4 id="restart" tabindex="-1"><a class="header-anchor" href="#restart" aria-hidden="true">#</a> <strong>[Restart]</strong></h4><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>退出后不会重启</td></tr><tr><td>on-success</td><td>当进程正常退出时(退出码为0) 执行重启</td></tr><tr><td>on-failure</td><td>当进程不正常退出时(退出码不为0) 执行重启</td></tr><tr><td>on-abnormal</td><td>当被信号终止和超时执行重启</td></tr><tr><td>on-abort</td><td>当收到没有捕捉到的信号终止时执行重启</td></tr><tr><td>on-watchdog</td><td>当看门狗超时时执行重启</td></tr><tr><td>always</td><td>一直重启</td></tr></tbody></table><h4 id="killmode" tabindex="-1"><a class="header-anchor" href="#killmode" aria-hidden="true">#</a> <strong>[KillMode]</strong></h4><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>control-group</td><td>杀掉当前进程中所有的进程</td></tr><tr><td>process</td><td>杀掉当前进程的主进程</td></tr><tr><td>mixed</td><td>主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</td></tr><tr><td>none</td><td>不杀掉任何进程</td></tr></tbody></table><h3 id="三、-install" tabindex="-1"><a class="header-anchor" href="#三、-install" aria-hidden="true">#</a> 三、<strong>[Install]</strong></h3><blockquote><p>定义安装配置文件（开机自启动必备）</p></blockquote><table><thead><tr><th>可选项</th><th>描述</th></tr></thead><tbody><tr><td>WantedBy</td><td>表示该服务所在的 Target(一般写  <strong>multi-user.target</strong>)</td></tr></tbody></table><h3 id="四、启动、停止、开机自启动" tabindex="-1"><a class="header-anchor" href="#四、启动、停止、开机自启动" aria-hidden="true">#</a> 四、<strong>启动、停止、开机自启动</strong></h3><h4 id="_1-启动" tabindex="-1"><a class="header-anchor" href="#_1-启动" aria-hidden="true">#</a> 1. 启动</h4><ul><li>通过systemctl start 来启动</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start test.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_2-停止" tabindex="-1"><a class="header-anchor" href="#_2-停止" aria-hidden="true">#</a> 2. 停止</h4><ul><li>通过systemctl stop 来停止</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop test.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-重启" tabindex="-1"><a class="header-anchor" href="#_3-重启" aria-hidden="true">#</a> 3. 重启</h4><ul><li>通过systemctl restart 来重启</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart test.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_4-开启开机自启动" tabindex="-1"><a class="header-anchor" href="#_4-开启开机自启动" aria-hidden="true">#</a> 4. 开启开机自启动</h4><ul><li>通过systemctl enable 来开启开机自启动</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> test.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_5-关闭开机自启动" tabindex="-1"><a class="header-anchor" href="#_5-关闭开机自启动" aria-hidden="true">#</a> 5. 关闭开机自启动</h4><ul><li>通过systemctl disable 来关闭开机自启动</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl disable test.service\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',36),d={render:function(t,e){return s}}}}]);