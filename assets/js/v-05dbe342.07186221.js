"use strict";(self.webpackChunkblog_vuepress=self.webpackChunkblog_vuepress||[]).push([[7723],{2404:(n,e,l)=>{l.r(e),l.d(e,{data:()=>s});const s={key:"v-05dbe342",path:"/blockchain/StarCoin/_blog/Move%E8%BF%9B%E9%98%B6Move%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93/Move%E8%BF%9B%E9%98%B6Move%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93.html",title:"Move语言三大精髓与NFT合约",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"一、Move语言的三大精髓",slug:"一、move语言的三大精髓",children:[{level:3,title:"1. Struct",slug:"_1-struct",children:[]},{level:3,title:"2. Ability",slug:"_2-ability",children:[]},{level:3,title:"3. Generic",slug:"_3-generic",children:[]}]},{level:2,title:"使用Move语言特性的 helloWorld 代码示例",slug:"使用move语言特性的-helloworld-代码示例",children:[]},{level:2,title:"二、常用合约",slug:"二、常用合约",children:[{level:3,title:"1. Vector",slug:"_1-vector",children:[]},{level:3,title:"2. Event",slug:"_2-event",children:[]},{level:3,title:"3. Error",slug:"_3-error",children:[]}]},{level:2,title:"三、NFT协议的实现",slug:"三、nft协议的实现",children:[{level:3,title:"1.NFT协议 V1",slug:"_1-nft协议-v1",children:[]},{level:3,title:"2. NFT协议 V2",slug:"_2-nft协议-v2",children:[]},{level:3,title:"3.NFT协议V3",slug:"_3-nft协议v3",children:[]},{level:3,title:"4.NFT协议V4",slug:"_4-nft协议v4",children:[]}]},{level:2,title:"四、问答环节",slug:"四、问答环节",children:[]}],filePathRelative:"blockchain/StarCoin/_blog/Move进阶Move语言精髓/Move进阶Move语言精髓.md",git:{updatedTime:1631072837e3,contributors:[]}}},3336:(n,e,l)=>{l.r(e),l.d(e,{default:()=>Zn});var s=l(6252),r=l(3015),a=l(2864),_=l(2366),u=l(804),t=l(7305),c=l(6861),i=l(6576),b=l(3117);const o=(0,s._)("h1",{id:"move语言三大精髓与nft合约",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#move语言三大精髓与nft合约","aria-hidden":"true"},"#"),(0,s.Uk)(" Move语言三大精髓与NFT合约")],-1),m=(0,s._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,s._)("pre",{class:"language-text"},[(0,s._)("code",null,"* 本文由Starcoin社区原创 作者:WGB\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br")])],-1),p=(0,s._)("ol",null,[(0,s._)("li",null,"Starcoin")],-1),d=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("智能合约编程语言，虚拟机，以及合约标准库是去中心化金融基础设施的核心部分，如何安全、便捷的在智能合约中表达资产，是区块链智能合约领域一直在研究的方向。"),(0,s._)("br"),(0,s.Uk)(" Starcoin 选择面向数字资产的智能编程语言Move，以及虚拟机，并提供了丰富的合约标准库。"),(0,s._)("br"),(0,s.Uk)(" Move 编程语言最早出现在 Facebook 的 Diem 区块链项目中，作为一种面向数字资产的智能合约编程语言，Move 具有 Resource 作为一等公民、灵活、安全、可验证等特性。这些特性和 Starcoin 的智能合约编程语言设计理念极为契合，因此 Starcoin 选择 Move 做为其智能合约的首选编程语言。"),(0,s._)("br"),(0,s.Uk)(" Move语言具有其他区块链语言不具备的特点，利用这些特点可以简单、高效、安全的生成合约代码，快速有效的开发全新的区块链应用。")])],-1),v=(0,s._)("p",null,[(0,s._)("img",{src:r,alt:"区块链"})],-1),h=(0,s._)("ol",{start:"2"},[(0,s._)("li",null,"NFT")],-1),T=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("NFT的全称是Non-Fungible Tokens，中文常被翻译成"),(0,s._)("code",null,'"不可同质化代币/不可替代代币"'),(0,s.Uk)("，它定义了一种生态中不可分割的、具有唯一性的代币交互和流通的接口规范。对于同质化货币Fungible Token 就是常见的各种Token，例如：BTC、ETH、STC等等，同质化货币的每一个币都可以被拆分，每个币没有他的编号，像是日常生活中的钢镚1元、5毛等，上面没有固定的编号只有通用的面值。而NFT一般来说是不可拆分的，每个NFT都有它的固定编号来标识它，可以理解为纸币，上面有编号，虽然面值相同但是编号不会相同。")])],-1),y=(0,s._)("p",null,"例如：下面这个gif就是价值50万美元的Nyan Cat",-1),f=(0,s._)("p",null,[(0,s._)("img",{src:a,alt:"50万美元的《 Nyan Cat（彩虹猫）》"})],-1),g=(0,s._)("ol",{start:"3"},[(0,s._)("li",null,"Starcoin 与 NFT")],-1),S=(0,s._)("blockquote",null,[(0,s._)("p",null,"Starcoin所使用的智能合约编程语言是专为数字资产而生的Move，数字资产以BTC为起点，中间经历了漫长的发展过程，到现在中间从产生了以太坊，波场等多条公链。由此也诞生出许多优秀的项目，如:CryptoKitties、Decentraland等，其中CryptoKitties在上线过后一度堵死以太坊网络，由此可以窥探到NFT的市场需求。Starcoin 正是为数字资产而来，使用Move的特性可以让NFT等数字资产在Starcoin这条公链中简单、安全、快速的转移或保存。Move语言的三大特性Struct、Ability和 Generic 可以帮助NFT在Starcoin 部署，可以方便的自定义NFT的类型、定义NFT的唯一性和编写通用的NFT的代码。")],-1),x=(0,s._)("h2",{id:"一、move语言的三大精髓",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#一、move语言的三大精髓","aria-hidden":"true"},"#"),(0,s.Uk)(" 一、Move语言的三大精髓")],-1),k=(0,s._)("h3",{id:"_1-struct",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-struct","aria-hidden":"true"},"#"),(0,s.Uk)(" 1. Struct")],-1),F=(0,s._)("blockquote",null,[(0,s._)("p",null,"  Move语言在语法上简洁明了，在内置支持的类型上比较精简，但不因此失去灵活性，可以通过Struct 的特性，创建自定义的类型，它既可以可以包含复杂的数据，也可以不包含任何数据。Struct类似其他编程语言中的结构体，可以通过key-value的形式定义字段并存储内容。由此我们可以方便的通过Struct创建自己的NFT、Token以及其他的数据类型。")],-1),E=(0,s._)("h4",{id:"_1-struct-演示",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-struct-演示","aria-hidden":"true"},"#"),(0,s.Uk)(" (1)Struct 演示")],-1),N=(0,s._)("blockquote",null,[(0,s._)("p",null,"  可以用一段代码来演示Struct，分别创建两个Struct：Empty和MyStruct，Empty为空，MyStruct包含多个基本类型和几个自定义的Struct类型：STC、Empty。")],-1),M=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module StructExample1 {\n3            use 0x1::STC::STC;\n4\n5            struct Empty{}\n6\n7            struct MyStruct {\n8                address_field: address,\n9                bool_field: bool,\n10                u64_field: u64,\n11                vec_field: vector<u8>,\n12                inner_field: Empty,\n13                coins: STC,\n14            }\n15        }\n16    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br")])],-1),U=(0,s._)("h4",{id:"_2-struct与function的配合",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-struct与function的配合","aria-hidden":"true"},"#"),(0,s.Uk)(" (2)Struct与Function的配合")],-1),q=(0,s._)("blockquote",null,[(0,s._)("p",null,"  在自定义类型的时候，大多使用的情况是做存储的单元，这时就需要使用有效的手段来操作Struct，在Move中可以使用Function对Struct进行操作，比如创建一个NFT的Struct后，通过函数来打造、转移、销毁NFT等等。可以使用代码来展示如何操作Struct的创建与销毁。在这段代码里两个Strcut都有各自的创建和销毁函数，对于Struct中的自定义类型的创建与销毁需要遵循自定义类型的设计进行操作。")],-1),w=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module StructExample2 {\n3            use 0x1::STC::STC;\n4            use 0x1::Vector;\n5            use 0x1::Token::{Self, Token};\n6    \n7            struct Empty{}\n8    \n9            struct MyStruct {\n10                address_field: address,\n11                bool_field: bool,\n12                u64_field: u64,\n13                vec_field: vector<u8>,\n14                inner_field: Empty,\n15                coins: Token<STC>,\n16            }\n17    \n18            fun new_empty() : Empty {\n19                Empty {}\n20            }\n21    \n22            fun destroy_empty(empty: Empty) {\n23                let Empty{} = empty;\n24            }\n25    \n26            public fun new_struct() : MyStruct {\n27                MyStruct {\n28                    address_field: 0x1,\n29                    bool_field: true,\n30                    u64_field: 1000000,\n31                    vec_field: Vector::empty(),\n32                    inner_field: Self::new_empty(),\n33                    coins: Token::zero<STC>(),\n34                }\n35            }\n36    \n37            public fun destroy_struct(my: MyStruct) {\n38                let MyStruct {\n39                    address_field: _,\n40                    bool_field: _,\n41                    u64_field: _,\n42                    vec_field: _,\n43                    inner_field: empty,\n44                    coins: coins,\n45                } = my;\n46    \n47                Self::destroy_empty(empty);\n48                Token::destroy_zero(coins);\n49            }\n50        }\n51    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"31"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"32"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"33"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"34"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"35"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"36"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"37"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"38"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"39"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"40"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"41"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"42"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"43"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"44"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"45"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"46"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"47"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"48"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"49"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"50"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"51"),(0,s._)("br")])],-1),C=(0,s._)("h4",{id:"struct、function和module的关系",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#struct、function和module的关系","aria-hidden":"true"},"#"),(0,s.Uk)(" Struct、Function和Module的关系")],-1),V=(0,s._)("blockquote",null,[(0,s._)("p",null,"  Struct和Function相辅相成，如果缺少了一个,另一个的存在也毫无意义， Module像是整个的工厂，可以创建修改销毁内部的Struct，Struct 像是原料，Function是操作原料的工具，可以在工厂(Module)中使用工具(function)来对原料(Struct)进行操控，最后生成可用的instance。")],-1),B=(0,s._)("p",null,[(0,s._)("img",{src:_,alt:"关系图"})],-1),A=(0,s._)("h3",{id:"_2-ability",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-ability","aria-hidden":"true"},"#"),(0,s.Uk)(" 2. Ability")],-1),I=(0,s._)("blockquote",null,[(0,s._)("p",null,"  Move语言实现了与rust类似的语法功能，是可靠的强类型区块链编程语言，在类型的权限控制上可以使用Ability特性的限制符，来控制不同类型的功能可以对资产的权限进行细致的控制："),(0,s._)("ul",null,[(0,s._)("li",null,"Copy :表示该值是否可以被复制"),(0,s._)("li",null,"Drop :表示该值是否可以在作用域结束时可以被丢弃"),(0,s._)("li",null,"Key :表示该值是否可以作为键值对全局状态进行访问"),(0,s._)("li",null,"Store :表示该值是否可以被存储到全局状态")])],-1),L=(0,s._)("p",null,[(0,s._)("img",{src:u,alt:"Ability能力"})],-1),D=(0,s._)("blockquote",null,[(0,s._)("p",null,"  通过在合约中对自定义类型的能力通过Ability进行限制，可以使程序变得简洁又不失安全性，例如定义一个NFT的类型，如果不赋予它Copy的能力，那么就可以保证NFT不能被随意的复制，提升了安全性。相同的概念还可以用钱的概念理解，在钱包中的钱如果可以随便复制、丢弃，就会让钱变得的毫无价值，所以通过对自定义类型的能力赋予，就可以一定程度上防止不安全的情况出现，当然，安全性最重要的影响因素是程序的制作者。")],-1),H=(0,s._)("h4",{id:"_1-copy-的演示",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-copy-的演示","aria-hidden":"true"},"#"),(0,s.Uk)(" (1)Copy 的演示")],-1),z=(0,s._)("blockquote",null,[(0,s._)("p",null,"虽然有一些例子中的Struct不应该被赋予Copy的能力，但是仍然有一部分的Struct需要Copy的能力，例如需要保存通讯录信息的应用就需要通信人的信息需要复制多份进行分发。通过代码可以直观的看到有Copy能力的Struct和没有Copy能力的Struct在功能上的区别。"),(0,s._)("ul",null,[(0,s._)("li",null,"定义两个Struct，其中CopyStruct带有Copy能力"),(0,s._)("li",null,"在销毁创建的两个Struct时，由于MoveStruct没有Copy的能力所以被销毁了本体，而CopyStruct在销毁了复制体后，本体依然存在")])],-1),W=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module AbilityExample2 {\n3            use 0x1::Debug;\n4    \n5            struct CopyStruct has copy {value:u64}\n6            struct MoveStruct {value:u64}\n7    \n8            public fun new_copy_struct() : CopyStruct {\n9                CopyStruct {value:100}\n10            }\n11    \n12            public fun destroy_copy_struct(copy_struct: CopyStruct) {\n13                let CopyStruct{value:_} = copy_struct;\n14            }\n15    \n16            public fun new_move_struct() : MoveStruct {\n17                MoveStruct {value:200}\n18            }\n19    \n20            public fun destroy_move_struct(move_struct: MoveStruct) {\n21                let MoveStruct {value:_} = move_struct;\n22            }\n23    \n24            public fun test() {\n25                let copy_struct = Self::new_copy_struct();\n26                let move_struct = Self::new_move_struct();\n27                Self::destroy_copy_struct(copy copy_struct);\n28                //Self::destroy_move_struct(copy move_struct);\n29                Self::destroy_move_struct(move_struct);\n30                Debug::print(&copy_struct.value);\n31                //Debug::print(&move_struct.value);\n32                Self::destroy_copy_struct(copy_struct);\n33            }\n34        }\n35    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"31"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"32"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"33"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"34"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"35"),(0,s._)("br")])],-1),G=(0,s._)("h4",{id:"_2-drop-的演示",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-drop-的演示","aria-hidden":"true"},"#"),(0,s.Uk)(" (2)Drop 的演示")],-1),j=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("  对于普通的类型销毁时可以通过 "),(0,s._)("code",null,'"_"'),(0,s.Uk)(" 的方式进行销毁，但是自定义的类型变量在销毁时需要通过销毁函数来进行销毁，Move中的Ability提供了Drop以便自定义类型在销毁时也可以通过 "),(0,s._)("code",null,'"_"'),(0,s.Uk)(" 进行销毁。通过代码可以清晰地了解此项能力。")]),(0,s._)("ul",null,[(0,s._)("li",null,[(0,s.Uk)("在销毁MyStruct时，内部的Empty已经被赋予了Drop的能力，在第51行的销毁函数中直接使用"),(0,s._)("code",null,'"_"'),(0,s.Uk)(" 对Empty类型的变量进行销毁，而无需调用Empty的销毁函数")])])],-1),R=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module AbilityExample1 {\n3            use 0x1::STC::STC;\n4            use 0x1::Vector;\n5            use 0x1::Token::{Self, Token};\n6\n7            struct Empty has drop {}\n8\n9            struct MyStruct {\n10                address_field: address,\n11                bool_field: bool,\n12                u64_field: u64,\n13                    vec_field: vector<u8>,\n14                inner_field: Empty,\n15                coins: Token<STC>,\n16            }\n17\n18            fun new_empty() : Empty {\n19                Empty {}\n20            }\n21\n22            fun destroy_empty(empty: Empty) {\n23                let Empty{} = empty;\n24            }\n25\n26            public fun new_struct() : MyStruct {\n27                MyStruct {\n28                    address_field: 0x1,\n29                        bool_field: true,\n30                        u64_field: 1000000,\n31                        vec_field: Vector::empty(),\n32                        inner_field: Self::new_empty(),\n33                        coins: Token::zero<STC>(),\n34                }\n35            }\n36\n37            public fun destroy_struct(my: MyStruct) {\n38                let MyStruct {\n39                    address_field: _,\n40                    bool_field: _,\n41                    u64_field: _,\n42                    vec_field: _,\n43                    inner_field: empty,\n44                    coins: coins,\n45                } = my;\n46\n47                Self::destroy_empty(empty);\n48                Token::destroy_zero(coins);\n49            }\n50\n51            public fun destroy_struct_v2(my: MyStruct) {\n52                let MyStruct {\n53                    address_field: _,\n54                    bool_field: _,\n55                    u64_field: _,\n56                    vec_field: _,\n57                    inner_field: _,\n58                    coins: coins,\n59                } = my;\n60\n61                Token::destroy_zero(coins);\n62            }\n63        }\n64    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"31"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"32"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"33"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"34"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"35"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"36"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"37"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"38"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"39"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"40"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"41"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"42"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"43"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"44"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"45"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"46"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"47"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"48"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"49"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"50"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"51"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"52"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"53"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"54"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"55"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"56"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"57"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"58"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"59"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"60"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"61"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"62"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"63"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"64"),(0,s._)("br")])],-1),K=(0,s._)("p",null,[(0,s._)("img",{src:t,alt:"区块链图"})],-1),P=(0,s._)("h3",{id:"_3-generic",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_3-generic","aria-hidden":"true"},"#"),(0,s.Uk)(" 3. Generic")],-1),Y=(0,s._)("blockquote",null,[(0,s._)("p",null,"  编写其他合约语言代码时，对于不同的NFT类型可能进行相同的处理时需要大量编写类似的代码，做了许多重复性工作，又例如为创建一个NFT通用的框架时，需要处理不同的类型，又需要大量重复类似的代码。Move语言在设计时通过Generic特性处理大量重复性工作，Generic类似其他编程语言中的泛型编程，可以实现通过单个函数的编写，应用于多种类型的功能，可以大幅度减少代码的重复性，提高编码效率，同时减少代码逻辑清晰更容易检查到错误的出现，避免上线后的损失。")],-1),J=(0,s._)("h4",{id:"_1-struct-泛型的演示",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-struct-泛型的演示","aria-hidden":"true"},"#"),(0,s.Uk)(" (1)Struct 泛型的演示")],-1),O=(0,s._)("blockquote",null,[(0,s._)("p",null,"  通过Struct创建泛型可以让一个Struct同时支持多种的内部类型，当需要使用u8、u64等类型时就不需要重复Struct。")],-1),Q=(0,s._)("p",null,"比如定义一个Box里面存有u64类型的变量：",-1),X=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"struct Box{\n    value:u64\n}\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br")])],-1),Z=(0,s._)("p",null,"如果要再定义一个带有u8类型的变量的Box:",-1),$=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"struct Box{\n    value:u8\n}\n\n**只需要定义一个带有Struct泛型的Box:**\n>只需要传入泛型就可以完成 Box<u8> 和 Box<u64>\n```move\nstruct Box<T>{\n    value:T\n}\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br")])],-1),nn=(0,s._)("h4",{id:"_2-struct泛型-ability",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-struct泛型-ability","aria-hidden":"true"},"#"),(0,s.Uk)(" (2)Struct泛型+Ability")],-1),en=(0,s._)("blockquote",null,[(0,s._)("p",null,"如果使用了泛型，也可以同时使用Ability，使在使用泛型的后仍旧不失去安全性。")],-1),ln=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("这段代码展示了使用泛型的Box的定义，可以传入泛型生成实际的Struct ，传入的类型也可以加上Ability进行限制，以便精准的操控各个数据类型的能力，大大提升了灵活性，这也是Move语言适合新时代区块链NFT的重要特性。 "),(0,s._)("strong",null,"代码示例:")])],-1),sn=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"struct Box<T1:copy + drop ,T2:copy + drop + store> has copy,drop{\n    contents_1: T1,\n    contents_2: T2,\n}\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br")])],-1),rn=(0,s._)("h4",{id:"_3-struct泛型-ability-function",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_3-struct泛型-ability-function","aria-hidden":"true"},"#"),(0,s.Uk)(" (3)Struct泛型+Ability+Function")],-1),an=(0,s._)("blockquote",null,[(0,s._)("p",null,"通过Struct、泛型和Ability的结合，再通过Function就可以实现通过这两个特性的结合，编写NFT通用框架，可以实现不可随意复制的，自定义任意类型的NFT铸造交易销毁等功能。")],-1),_n=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("在这段代码中通过函数创建Box时需要指定泛型，可以在函数中直接指定，也可以通过传参方式传入泛型，有多个泛型参数时也可以传入单个泛型，剩余在函数中指定。通过Struct泛型+Ability+Function的有机结合，可以让Move语言的合约有着极为强大的灵活性与安全性，借助这些功能可以轻松地移植其他区块链项目，实现快速上线、安全上线。 "),(0,s._)("strong",null,"代码示例:")])],-1),un=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2{\n2        module Box2{\n3        \n4            struct Box<T1:copy + drop, T2:copy + drop + store> has copy,drop {\n5                contents_1: T1,\n6                contents_2: T2,\n7            }\n8    \n9    \n10            fun create_box<T1:copy + drop, T2:copy + drop + store>(val_1:T1,    val_2:T2):Box<T1, T2> {\n11                Box {contents_1:val_1, contents_2:val_2}\n12            }\n13    \n14            public(script) fun create_bool_box<T2:copy + drop + store>(val_2:T2) {\n15                let _ = Self::create_box<bool, T2>(false, val_2);\n16            }\n17    \n18            public(script) fun create_bool_u64_box() {\n19                let _ = Self::create_box<bool, u64>(false, 100);\n20            }\n21        }\n22    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br")])],-1),tn=(0,s._)("h2",{id:"使用move语言特性的-helloworld-代码示例",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#使用move语言特性的-helloworld-代码示例","aria-hidden":"true"},"#"),(0,s.Uk)(" 使用Move语言特性的 helloWorld 代码示例")],-1),cn=(0,s._)("blockquote",null,[(0,s._)("p",null,"  Move语言的三大精髓通过代码可以更为直观的展现出来，这段代码可以打印hello world字符串，但是在Move没有String类型，所以第15行通过hello world的16进制来输出字符。在这段代码中使用了Move的三个特性分别为："),(0,s._)("ul",null,[(0,s._)("li",null,"第5行和第9行通过Strcut定义了自定义类型的AnyWordEvent和EventHolder"),(0,s._)("li",null,"第5行和第9行通过Ability修饰了两个自定义类型"),(0,s._)("li",null,"在第16行使用Generic传入EventHolder类型来调用borrow_global_mut函数")])],-1),bn=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,'1    address 0x2{\n2        module HelloWorld{\n3            use 0x1::Signer;\n4            use 0x1::Event;\n5            struct AnyWordEvent has drop,store {\n6                words:vector<u8>,\n7            }\n8\n9            struct EventHolder has key{\n10                any_word_events:Event::EventHandle<AnyWordEvent>,\n11            }\n12\n13            public (script) fun hello_world(account: &signer) acquires EventHolder {\n14                let addr = Signer::address_of(account);\n15                let hello_world = x"68656c6c6f20776f726c64";  // hello world\n16                let holder = borrow_global_mut<EventHolder>(addr);\n17                Event::emit_event<AnyWordEvent>(&mut holder.any_word_events, AnyWordEvent{words:hello_world});\n18            }\n19        }\n20    }\n')]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br")])],-1),on=(0,s._)("p",null,[(0,s._)("img",{src:c,alt:"区块链"})],-1),mn=(0,s._)("h2",{id:"二、常用合约",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#二、常用合约","aria-hidden":"true"},"#"),(0,s.Uk)(" 二、常用合约")],-1),pn=(0,s._)("h3",{id:"_1-vector",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-vector","aria-hidden":"true"},"#"),(0,s.Uk)(" 1. Vector")],-1),dn=(0,s._)("blockquote",null,[(0,s._)("p",null,"Vector是在标准库中的一个Module,作用可以理解为C++中的Vector，可以使用Vector来实现NFT陈列室功能，保存所有的NFT在自己的账户下，可以方便的进行查看和管理，也可以使用它存入自定义的其他类型的Struct。")],-1),vn=(0,s._)("p",null,[(0,s._)("strong",null,"常用函数：")],-1),hn=(0,s._)("table",null,[(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"函数名"),(0,s._)("th",null,"描述")])]),(0,s._)("tbody",null,[(0,s._)("tr",null,[(0,s._)("td",null,"public fun empty<Element>():vector<Element>;"),(0,s._)("td",null,"创建一个空的vector")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun pop_back<Element>(v: &mut vector<Element>):Element;"),(0,s._)("td",null,"返回最后一个值的引用")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun push_back<Element>(v: &mut vector<Element>,e:Element);"),(0,s._)("td",null,"插入一个值")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun length<Element>(v: &vector<Element>):u64;"),(0,s._)("td",null,"返回vector的长度")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun is_empty<Element>(v: &vector<Element>):bool;"),(0,s._)("td",null,"判断vector是否为空")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun contains<Element>(v: &vector<Element>,e:&Element):bool;"),(0,s._)("td",null,"判断是否包含一个元素")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun index_of<Element>(v: &vector<Element>,e:&Element):(bool,u64);"),(0,s._)("td",null,"查看元素在vector中的位置")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun remove<Element>(v: &mut vector<Element>,i:u64):Element;"),(0,s._)("td",null,"删除vector中指定位置的元素")])])],-1),Tn=(0,s._)("h3",{id:"_2-event",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-event","aria-hidden":"true"},"#"),(0,s.Uk)(" 2. Event")],-1),yn=(0,s._)("blockquote",null,[(0,s._)("p",null,"Event 是标准库中的一个Module，作用是可以通知钱包，使钱包可以通知用户或在前端做其他的一些应用，例如NFT交易时，可以通知购买者已经收到NFT等等。")],-1),fn=(0,s._)("p",null,[(0,s._)("strong",null,"常用函数:")],-1),gn=(0,s._)("table",null,[(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"函数名"),(0,s._)("th",null,"描述")])]),(0,s._)("tbody",null,[(0,s._)("tr",null,[(0,s._)("td",null,"public fun new_event_handle<T: drop + store>(account: &signer):EventHandle<T> acquires EventHandleGenerator{}"),(0,s._)("td",null,"定义一个新的Event")]),(0,s._)("tr",null,[(0,s._)("td",null,"public fun emit_event<T: drop + store>(handle_ref: &mut EventHandle<T>,msg: T):{}"),(0,s._)("td",null,"发送Event")])])],-1),Sn=(0,s._)("h3",{id:"_3-error",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_3-error","aria-hidden":"true"},"#"),(0,s.Uk)(" 3. Error")],-1),xn=(0,s._)("blockquote",null,[(0,s._)("p",null,"当区块链执行判断出错时中断合约，在编码过程中如果数值不符合预期可以通过这种方式进行判断，并返回错误代码，错误代码可以展示在区块链的回复消息中，以便前端进行判断并反馈用户。例如：购买NFT时，输入的金额小于NFT的价格时可以通过assert判断大小并退出程序，来保证交易安全可靠。")],-1),kn=(0,s._)("p",null,[(0,s._)("strong",null,"常用:")],-1),Fn=(0,s._)("table",null,[(0,s._)("thead",null,[(0,s._)("tr",null,[(0,s._)("th",null,"函数"),(0,s._)("th",null,"描述")])]),(0,s._)("tbody",null,[(0,s._)("tr",null,[(0,s._)("td",null,"assert(false,1000)"),(0,s._)("td",null,"第一个参数判断为真时可以执行后续，为假则退出并发送错误码")]),(0,s._)("tr",null,[(0,s._)("td",null,"abort(10000)"),(0,s._)("td",null,"直接退出，并发送错误码")])])],-1),En=(0,s._)("p",null,[(0,s._)("img",{src:i,alt:"NFT图"})],-1),Nn=(0,s._)("h2",{id:"三、nft协议的实现",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#三、nft协议的实现","aria-hidden":"true"},"#"),(0,s.Uk)(" 三、NFT协议的实现")],-1),Mn=(0,s._)("blockquote",null,[(0,s._)("p",null,"通过Move语言的三大特性和常用的合约module进行配合，可以非常轻松地创建NFT协议，我们可以以渐进式的方式进行NFT协议的编写。")],-1),Un=(0,s._)("h3",{id:"_1-nft协议-v1",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_1-nft协议-v1","aria-hidden":"true"},"#"),(0,s.Uk)(" 1.NFT协议 V1")],-1),qn=(0,s._)("blockquote",null,[(0,s._)("p",null,"在这段代码中实现了NFT的初始化和铸造，在第6行和第8行分别创建自己的NFT和NFT列表用来存放NFT，在第12行初始化NFT的列表以便可以接收和保存NFT，在第16行的铸造NFT函数中先判断是否可以接收NFT，如果不能则通过assert的判断直接退出并返回错误代码，保证NFT不会被不可接收的账户接收。这段代码实现了非常简单的NFT协议，可以通过其他的特性和功能进行完善。")],-1),wn=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module NFTExample1 {\n3            use 0x1::Signer;\n4            use 0x1::Vector;\n5    \n6            struct NFT has key, store { name: vector<u8> }\n7    \n8            struct UniqIdList has key, store {\n9                data: vector<vector<u8>>\n10            }\n11    \n12            public fun initialize(account: &signer) {\n13                move_to(account, UniqIdList {data: Vector::empty<vector<u8>>()});\n14            }\n15    \n16            public fun new(account: &signer, name: vector<u8>): NFT acquires UniqIdList {\n17                let account_address = Signer::address_of(account);\n18                let exist = Vector::contains<vector<u8>>(&borrow_global<UniqIdList>(account_address).data, &name);\n19                assert(!exist, 1);\n20                let id_list = borrow_global_mut<UniqIdList>(account_address);\n21                Vector::push_back<vector<u8>>(&mut id_list.data, copy name);\n22                NFT { name }\n23            }\n24        }\n25    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br")])],-1),Cn=(0,s._)("h3",{id:"_2-nft协议-v2",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_2-nft协议-v2","aria-hidden":"true"},"#"),(0,s.Uk)(" 2. NFT协议 V2")],-1),Vn=(0,s._)("blockquote",null,[(0,s._)("p",null,[(0,s.Uk)("通过Strcut可创建自己的NFT，但是如果需要创建其他类型的NFT就需要重新写代码，所以可以使用泛型编程的思想来重新构建NFT代码，在6行和8行定义带有泛型的NFT和NFT列表，在第12行定义初始化vector"),(0,s._)("code",null,"<u8>"),(0,s.Uk)("类型的NFT列表，在16行的函数的返回值和内部调用函数时使用的都是带有泛型的struct和函数，现在这个代码可以称作不完全的NFT框架，可以适合小范围测试的多个NFT。")])],-1),Bn=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"1    address 0x2 {\n2        module NFTExample2 {\n3            use 0x1::Signer;\n4            use 0x1::Vector;\n5    \n6            struct NFT<T: store> has key, store { name: T }\n7    \n8            struct UniqIdList<T: store> has key, store {\n9                data: vector<T>\n10            }\n11    \n12            public fun initialize(account: &signer) {\n13                move_to(account, UniqIdList {data: Vector::empty<vector<u8>>()});\n14            }\n15    \n16            public fun new(account: &signer, name: vector<u8>): NFT<vector<u8>> acquires UniqIdList {\n17                let account_address = Signer::address_of(account);\n18                let exist = Vector::contains<vector<u8>>(&borrow_global<UniqIdList<vector<u8>>> (account_address).data, &name);\n19                assert(!exist, 1);\n20                let id_list = borrow_global_mut<UniqIdList<vector<u8>>>(account_address);\n21                Vector::push_back<vector<u8>>(&mut id_list.data, copy name);\n22                NFT { name }\n23            }\n24        }\n25    }\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br")])],-1),An=(0,s._)("h3",{id:"_3-nft协议v3",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_3-nft协议v3","aria-hidden":"true"},"#"),(0,s.Uk)(" 3.NFT协议V3")],-1),In=(0,s._)("blockquote",null,[(0,s._)("p",null,"在上段代码中的new函数和initialize函数没有使用泛型参数，如果需要完成NFT的框架，就需要对这两个函数进行修改，在以下代码中把new函数和initialize函数也使用泛型进行修饰，使该NFT协议的灵活性大大提升，可以试用于多种不同的NFT测试。")],-1),Ln=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"address 0x2 {\n    module NFTExample3 {\n        use 0x1::Signer;\n        use 0x1::Vector;\n\n        struct NFT<T: store> has key, store { name: T }\n\n        struct UniqIdList<T: store> has key, store {\n            data: vector<T>\n        }\n\n        public fun initialize<T: store>(account: &signer) {\n            move_to(account, UniqIdList {data: Vector::empty<T>()});\n        }\n\n        public fun new<T: store + copy>(account: &signer, name: T): NFT<T> acquires UniqIdList {\n            let account_address = Signer::address_of(account);\n            let exist = Vector::contains<T>(&borrow_global<UniqIdList<T>>(account_address).data, &name);\n            assert(!exist, 1);\n            let id_list = borrow_global_mut<UniqIdList<T>>(account_address);\n            Vector::push_back<T>(&mut id_list.data, copy name);\n            NFT { name }\n        }\n    }\n}\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br")])],-1),Dn=(0,s._)("h3",{id:"_4-nft协议v4",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#_4-nft协议v4","aria-hidden":"true"},"#"),(0,s.Uk)(" 4.NFT协议V4")],-1),Hn=(0,s._)("blockquote",null,[(0,s._)("p",null,"通过对NFT协议的完善，可以在协议中增加Event，用来增加通知的功能可以在钱包中通知NFT的铸造通知。这段代码可以说是比较完整的简单NFT协议，可以再增加移动、销毁等功能，并增加图片显示等，配合前端应用可以制作出精美的NFT。")],-1),zn=(0,s._)("div",{class:"language-move ext-move line-numbers-mode"},[(0,s._)("pre",{class:"language-move"},[(0,s._)("code",null,"address 0x2 {\n    module NFTExample4 {\n        use 0x1::Vector;\n        use 0x1::Event;\n\n        struct NFT<T: store> has key, store { name: T }\n\n        struct UniqIdList<T: store + drop> has key, store {\n            data: vector<T>,\n            nft_events: Event::EventHandle<NFTEvent<T>>,\n        }\n\n        struct NFTEvent<T: store + drop> has drop, store {\n            name: T,\n        }\n\n        public fun initialize<T: store + drop>(account: &signer) {\n            move_to(account, UniqIdList {data: Vector::empty<T>(), nft_events: Event::new_event_handle<NFTEvent<T>>(account)});\n        }\n\n        public fun new<T: store + copy + drop>(_account: &signer, account_address:address, name: T): NFT<T> acquires UniqIdList {\n            let exist = Vector::contains<T>(&borrow_global<UniqIdList<T>>(account_address).data, &name);\n            assert(!exist, 1);\n            let id_list = borrow_global_mut<UniqIdList<T>>(account_address);\n            Vector::push_back<T>(&mut id_list.data, copy name);\n            let new_name = copy name;\n            Event::emit_event(&mut id_list.nft_events, NFTEvent { name:new_name });\n            NFT { name }\n        }\n    }\n}\n")]),(0,s._)("div",{class:"line-numbers"},[(0,s._)("span",{class:"line-number"},"1"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"2"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"3"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"4"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"5"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"6"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"7"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"8"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"9"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"10"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"11"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"12"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"13"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"14"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"15"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"16"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"17"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"18"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"19"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"20"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"21"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"22"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"23"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"24"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"25"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"26"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"27"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"28"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"29"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"30"),(0,s._)("br"),(0,s._)("span",{class:"line-number"},"31"),(0,s._)("br")])],-1),Wn=(0,s._)("p",null,[(0,s._)("img",{src:b,alt:"区块链"})],-1),Gn=(0,s._)("h2",{id:"四、问答环节",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#四、问答环节","aria-hidden":"true"},"#"),(0,s.Uk)(" 四、问答环节")],-1),jn=(0,s._)("blockquote",null,[(0,s._)("p",null,"在Starcoin的社区中有许多的开发者或关注者也在提出各种各样的问题，对于这些问题也有可靠的回答。")],-1),Rn=(0,s._)("ol",null,[(0,s._)("li",null,"投票时候币只有WithdrawEvent但是没有DepositEvent，这和老师刚讲的钱只能move有什么区别呢？ 是move到vote合约的意思吗？")],-1),Kn=(0,s._)("ul",null,[(0,s._)("li",null,"答：对，Move的语义就是转移，在投票时所投的Token就是通过Move转移到投票合约中")],-1),Pn=(0,s._)("ol",{start:"2"},[(0,s._)("li",null,"move上有类似ERC20这样的标准吗")],-1),Yn=(0,s._)("ul",null,[(0,s._)("li",null,"答：有的，但是不是Move中的，是Starcoin的stdlib中定义的类似ERC20的协议。但是在以太坊上的eth和ERC20的协议的Token的权限有所不同，但是Starcoin上的Token都是一样的。")],-1),Jn=(0,s._)("ol",{start:"3"},[(0,s._)("li",null,"Move有自定义异常和异常捕获吗？发现预期的异常得能处理吧")],-1),On=(0,s._)("ul",null,[(0,s._)("li",null,"答：可以的，比如交易丢掉或者回返在output中")],-1),Qn=(0,s._)("ol",{start:"4"},[(0,s._)("li",null,"泛型后面ability是要和定义的一样，还是子集就行")],-1),Xn=(0,s._)("ul",null,[(0,s._)("li",null,"答：泛型字段的里的泛型可以和整体的Struct不完全相同，可以大于等于整体")],-1),Zn={render:function(n,e){return(0,s.wg)(),(0,s.iD)(s.HY,null,[o,m,p,d,v,h,T,y,f,g,S,x,k,F,E,N,M,U,q,w,C,V,B,A,I,L,D,H,z,W,G,j,R,K,P,Y,J,O,Q,X,Z,$,nn,en,ln,sn,rn,an,_n,un,tn,cn,bn,on,mn,pn,dn,vn,hn,Tn,yn,fn,gn,Sn,xn,kn,Fn,En,Nn,Mn,Un,qn,wn,Cn,Vn,Bn,An,In,Ln,Dn,Hn,zn,Wn,Gn,jn,Rn,Kn,Pn,Yn,Jn,On,Qn,Xn],64)}}},2864:(n,e,l)=>{n.exports=l.p+"assets/img/NFT1.53cb2697.gif"},6576:(n,e,l)=>{n.exports=l.p+"assets/img/NFT图.a28d7069.jpeg"},804:(n,e,l)=>{n.exports=l.p+"assets/img/ability.b58ca6db.png"},2366:(n,e,l)=>{n.exports=l.p+"assets/img/st_Fun_Mod.e024130a.png"},3015:(n,e,l)=>{n.exports=l.p+"assets/img/区块链图2.ccbb35c3.jpg"},6861:(n,e,l)=>{n.exports=l.p+"assets/img/区块链图3.dac77991.jpeg"},3117:(n,e,l)=>{n.exports=l.p+"assets/img/区块链图4.ba2491d8.jpeg"},7305:(n,e,l)=>{n.exports=l.p+"assets/img/区块链图5.311db2e0.jpeg"}}]);